import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pos{
    int x;
    int y;
    public Pos(int x, int y){
        this.x = x;
        this.y = y;
    }
}
public class Main{
    static int n;
    static int m;
    static int[][] arr;
    static boolean[][] visit;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        int count = 0;
        while(true){
            int result = check();
            if(result >=2){
                break;
            }
            else if(result == 0){
                count = 0;
                break;
            }
            melt();
            count++;
        }
        System.out.println(count);
    }
    private static void melt(){
        Queue<Pos> q = new LinkedList<>();
        boolean[][] visited = new boolean[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (arr[i][j] > 0) {
                    q.add(new Pos(i, j));
                    visited[i][j] = true;
                }
            }
        }

        while (!q.isEmpty()) {
            Pos current = q.poll();

            int sea = 0;
            for (int i = 0; i < 4; i++) {
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];

                if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                    if (!visited[nx][ny] && arr[nx][ny] == 0) {
                        sea++;
                    }
                }
            }

            if (arr[current.x][current.y] - sea < 0) {
                arr[current.x][current.y] = 0;
            } else {
                arr[current.x][current.y] -= sea;
            }
        }
    }
    private static int check(){
        visit = new boolean[n][m];
        int count=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j] !=0 && !visit[i][j]){
                    bfs(i, j);
                    count++;
                }
            }
        }
        return count;
    }
    private static void bfs(int x, int y){
        Queue<Pos> q = new LinkedList<>();
        q.add(new Pos(x, y));
        visit[x][y] = true;
        while(!q.isEmpty()){
            Pos current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(visit[nx][ny] || arr[nx][ny] == 0){
                    continue;
                }
                if(nx >=0 && ny>=0 && nx < n && ny<m){
                    visit[nx][ny] = true;
                    q.add(new Pos(nx, ny));
                }
            }
        }
    }
}
