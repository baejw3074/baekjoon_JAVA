import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Moon{
    int x;
    int y;
    int count;
    int key;
    public Moon(int x, int y, int count, int key){ 
        this.x = x;
        this.y = y;
        this.count = count;
        this.key = key;
    }
}
public class ë‹¬ {
    static int n;
    static int m;
    static char[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static boolean[][][] visit;

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new char[n][m];
        visit = new boolean[n][m][64];
        for(int i=0; i<n; i++){
            String str = br.readLine();
            for(int j=0; j<m; j++){
                arr[i][j] = str.charAt(j);
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j] == '0'){
                    System.out.println(bfs(i, j));
                }
            }
        }

    }
    public static int bfs(int x, int y){
        Queue<Moon> q = new LinkedList<>();
        q.add(new Moon(x, y, 0, 0));
        visit[x][y][0] = true;
        while(!q.isEmpty()){
            Moon current = q.poll();
            if(arr[current.x][current.y] == '1'){
                return current.count;
            }
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx>=0 && ny >=0 && nx<n && ny<m && !visit[nx][ny][current.key] && arr[nx][ny] != '#'){
                    if(arr[nx][ny] >='a' && arr[nx][ny]<='f'){
                        int next_key = 1 << (arr[nx][ny] - 'a');
                        next_key = current.key | next_key;
                        visit[nx][ny][next_key] = true;
                        q.add(new Moon(nx, ny, current.count+1, next_key));
                    }
                    else if(arr[nx][ny] >='A' && arr[nx][ny] <='F'){
                        if((current.key & 1 << (arr[nx][ny]-'A')) == (int)Math.pow(2, arr[nx][ny]-'A')){
                            visit[nx][ny][current.key] = true;
                            q.add(new Moon(nx, ny, current.count+1, current.key));
                        }
                    }
                    else{
                        visit[nx][ny][current.key] = true;
                        q.add(new Moon(nx, ny, current.count+1, current.key));
                    }
                }
            }
        }
        return -1;
    }

}
