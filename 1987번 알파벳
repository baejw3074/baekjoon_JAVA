import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int r, c;
    static int[][] arr;
    static boolean[] visit = new boolean[26];
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int result = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        r = Integer.parseInt(st.nextToken());
        c = Integer.parseInt(st.nextToken());
        arr = new int[r][c];

        for (int i = 0; i < r; i++) {
            String str = br.readLine();
            for (int j = 0; j < c; j++) {
                arr[i][j] = str.charAt(j) - 'A';
            }
        }

        // 시작 지점에서 count를 1로 시작
        dfs(0, 0, 1);
        System.out.println(result);
    }

    private static void dfs(int x, int y, int count) {
        // 방문 체크
        visit[arr[x][y]] = true;
        result = Math.max(result, count);

        // 4방향 탐색
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && ny >= 0 && nx < r && ny < c && !visit[arr[nx][ny]]) {
                dfs(nx, ny, count + 1);
            }
        }

        // 백트래킹: 방문 복구
        visit[arr[x][y]] = false;
    }
}
