import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 외판원순회2 {
    static int n;
    static int[][] arr;
    static boolean[] visit;
    static int min;
    static int[] select; // 방문 순서

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        arr = new int[n][n];
        visit = new boolean[n];
        select = new int[n];

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        min = Integer.MAX_VALUE;
        permutation(0);
        System.out.println(min);
    }
    public static void permutation(int cnt){
        if(cnt == n){
            int sum = 0;
            int count = 0;
            for(int i=0; i<n; i++){
                if(i!=n-1){
                    if(arr[select[i]][select[i+1]] == 0){ // 가는 길이 0이면 못감
                        break;
                    }
                    count++;
                    sum += arr[select[i]][select[i+1]];
                }
                else{
                    if(arr[select[n-1]][select[0]] == 0){ // 가는 길이 0이면 못감
                        break;
                    }
                    count++;
                    sum += arr[select[n-1]][select[0]];
                }
            }
            if(count == n){
                if(min > sum){
                    min = sum;
                }
            }
            return;
        }
        for(int i=0; i<n; i++){
            if(visit[i]) continue;
            select[cnt] = i;
            visit[i] = true;
            permutation(cnt+1);
            visit[i] = false;
        }
    }
}
