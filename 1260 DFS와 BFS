import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class dfsbfs {
    static int n;
    static int m;
    static int v;
    static int[][] arr;
    static boolean[] visit;
    static StringBuilder sb = new StringBuilder();
    static Queue<Integer> q = new LinkedList<>();
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        v = sc.nextInt();

        arr = new int[n+1][n+1];
        visit = new boolean[n+1];
        for(int i=0; i<m; i++){
                int a = sc.nextInt();
                int b = sc.nextInt();
                arr[a][b] = arr[b][a] = 1;

        }
        dfs(v);
        System.out.println(sb);
        visit = new boolean[n+1];
        bfs(v);


    }
    public static void dfs(int v){
        visit[v] = true;
        sb.append(v + " ");

        for(int i=0; i<=n; i++){
            if(arr[v][i] == 1 && !visit[i]){
                dfs(i);
            }
        }
    }

    public static void bfs(int v){
        q.add(v);
        visit[v] = true;

        while(!q.isEmpty()){
            v = q.poll();
            System.out.print(v + " ");

            for(int i=1; i<=n; i++){
                if(arr[v][i] == 1 && !visit[i]){
                    q.add(i);
                    visit[i] = true;
                }
            }
        }
    }
}
