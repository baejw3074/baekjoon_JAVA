import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
class Edge implements Comparable<Edge>{
    int start;
    int end;
    int weight;
    public Edge(int start, int end, int weight){
        this.start = start;
        this.end = end;
        this. weight = weight;
    }
    @Override
    public int compareTo(Edge o){
        return weight - o.weight;
    }
}
public class Main{
    static int n, m;
    static PriorityQueue<Edge> q;
    static int[] parent;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st  = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        q = new PriorityQueue<>();

        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int weight = Integer.parseInt(st.nextToken());
            q.offer(new Edge(start, end, weight));
        }
        parent = new int[n+1];
        System.out.println(kruskal());
    }
    public static int kruskal(){
        for(int i=1; i<=n; i++){
            parent[i] = i;
        }
        int count = 0;
        int dist = 0;
        while(count < n-2){
            Edge edge = q.poll();
            int p1 = find(edge.start);
            int p2 = find(edge.end);

            if(p1 != p2){
                union(p1, p2);
                dist += edge.weight;
                count++;
            }
        }
        return dist;
    }
    private static void union(int a, int b){
        parent[a] = b;
    }
    private static int find(int a){
        if(parent[a] == a){
            return a;
        }
        else{
            return parent[a] = find(parent[a]);
        }
    }
}
