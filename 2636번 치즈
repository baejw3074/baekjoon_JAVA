import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int n, m;
    static int[][] arr;
    static boolean[][] visit;
    static int count;
    static int[] dr = {-1, 1, 0, 0};
    static int[] dc = {0, 0, -1, 1};

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n][m];

        count = 0;
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
                if(arr[i][j] == 1){
                    count++;
                }
            }
        }

        int time=0;
        int cheese = 0;
        while(count!=0){
            cheese =count;
            time++;
            visit = new boolean[n][m];
            bfs();
        }
        System.out.println(time);
        System.out.println(cheese);
    }
    public static void bfs(){
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {0, 0});
        visit[0][0] = true;

        while(!q.isEmpty()){
            int[] current = q.poll();
            for(int i=0; i<4; i++){
                int dy = current[0] + dr[i];
                int dx = current[1] + dc[i];

                if(dx >=0 && dy >=0 && dx<m && dy<n && !visit[dy][dx]){
                    visit[dy][dx] = true;
                    if(arr[dy][dx] == 0){
                        q.offer(new int[] {dy, dx});
                    }
                    else{
                        count--;
                        arr[dy][dx] = 0;
                    }
                }
            }

        }
    }
}
