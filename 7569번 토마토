import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Pos{
    int z;
    int x;
    int y;
    public Pos(int z, int x, int y){
        this.z =z;
        this.x=x;
        this.y=y;
    }
}

public class Main{
    static int m, n, h;
    static int[][][] arr;
    static boolean[][][] visit;
    static int[]dx = {-1, 1, 0 ,0 ,0 ,0};
    static int[] dy = {0, 0, -1 ,1 ,0 ,0};
    static int[] dz = {0, 0, 0, 0, -1, 1};
    static Queue<Pos> queue = new LinkedList<>();
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        h = Integer.parseInt(st.nextToken());
        arr = new int[h][n][m];

        for(int i=0; i<h; i++){
            for(int j=0; j<n; j++){
                st = new StringTokenizer(br.readLine());
                for(int k=0; k<m; k++){
                    arr[i][j][k] = Integer.parseInt(st.nextToken());
                    if(arr[i][j][k] == 1){
                        queue.add(new Pos(i, j, k));
                    }
                }
            }
        }
        int count = 0;
        for(int i=0; i<h; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<m; k++){
                    if(arr[i][j][k] == 0){
                        count++;
                    }
                }
            }
        }
        if(count != 0){
            System.out.println(bfs());
        }
        else{
            System.out.println(0);
        }
    }
    private static int bfs(){
        while(!queue.isEmpty()){
            Pos current = queue.poll();
            for(int i=0; i<6; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                int nz = current.z + dz[i];
                if(nx >= 0 && ny >= 0 && nz >= 0 && nx < n &&  ny < m && nz < h){
                    if(arr[nz][nx][ny] == 0){
                        queue.add(new Pos(nz, nx, ny));
                        arr[nz][nx][ny] = arr[current.z][current.x][current.y] + 1;
                    }
                }
            }
        }
        int result = 0;
        for(int i=0; i<h; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<m; k++){
                    if(arr[i][j][k] == 0 ){
                        return -1;
                    }
                    else{
                        result = Math.max(result, arr[i][j][k]);
                    }
                }
            }
        }
        return result -1;
    }
}
