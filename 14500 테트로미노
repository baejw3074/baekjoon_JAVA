import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main{
    static int n, m;
    static int[][] arr;
    static boolean[][] visit;
    static int max = Integer.MIN_VALUE;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];
        visit = new boolean[n][m];

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                visit[i][j] = true;
                dfs(i, j, arr[i][j], 1);
                visit[i][j] = false;
            }
        }
        System.out.println(max);
    }
    private static void dfs(int x, int y, int sum, int count){
        if(count == 4){
            max = Math.max(sum, max);
            return;
        }
        for(int i=0; i<4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx < 0 || ny < 0 || nx >= n || ny >= m){
                continue;
            }
            if(!visit[nx][ny]){
                if(count == 2){ // ㅗ, ㅓ, ㅏ, ㅜ 처리하기 위해서 -> 3칸을 탐색한 후 다시 두번째 칸으로 돌아옴
                    visit[nx][ny] = true;
                    dfs(x, y, sum + arr[nx][ny], count+1);
                    visit[nx][ny] = false;
                }
                visit[nx][ny] = true;
                dfs(nx, ny, sum + arr[nx][ny], count+1);
                visit[nx][ny] = false;
            }
        }
    }
}
