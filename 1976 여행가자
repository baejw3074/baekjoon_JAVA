
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    static int n;
    static int m;
    static int[][] arr;
    static int[] city;
    static int count=0;
    static int result=0;
    static boolean[][] visit;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n+1][n+1];
        for(int i=1; i<=n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=1; j<=n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        city = new int[m+1];
        st = new StringTokenizer(br.readLine());
        for(int i=1; i<=m; i++){
            city[i] = Integer.parseInt(st.nextToken());
        }
        solve();
    }
    public static void solve(){
        for(int i=1; i<=m-1; i++){
            if(arr[city[i]][city[i+1]] == 1){
                count++;
                continue;
            }
            else{
                visit = new boolean[n+1][n+1];
                result = 0;
                dfs(city[i], city[i+1]);
                if(result == 1){
                    count++;
                }
                else{
                    System.out.println("NO");
                    System.exit(0);
                }
            }
        }
        if(count == m-1){
            System.out.println("YES");
        }
    }
    public static void dfs(int start, int end){

        if(start == end){
            result = 1;
            return;
        }
        for(int i=1; i<=n; i++){
            if(arr[start][i] == 1 && !visit[start][i]){
                visit[start][i] = true;
                dfs(i, end);
            }
        }
    }
}
