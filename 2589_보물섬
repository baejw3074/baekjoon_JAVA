import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pos{
    int x;
    int y;
    int len;
    public Pos(int x, int y, int len){
        this.x = x;
        this.y=y;
        this.len = len;
    }
}
public class Main{
    static int n, m;
    static char[][] arr;
    static boolean[][] visit;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int answer = 0;
    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new char[n][m];

        for(int i=0; i<n; i++){
            String str = br.readLine();
            for(int j=0; j<str.length(); j++){
                arr[i][j] = str.charAt(j);
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j] == 'L'){
                    visit = new boolean[n][m];
                    bfs(new Pos(i, j, 0));
                }
            }
        }
        System.out.println(answer);
    }
    private static void bfs(Pos p){
        Queue<Pos> queue = new LinkedList<>();
        queue.add(p);
        visit[p.x][p.y] = true;

        while(!queue.isEmpty()){
            Pos current = queue.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];

                if(nx >=0 && nx < n && ny >=0 && ny < m){
                    if(!visit[nx][ny] && arr[nx][ny] == 'L'){
                        visit[nx][ny] = true;
                        queue.add(new Pos(nx, ny, current.len + 1));
                        answer = Math.max(answer, current.len + 1);
                    }
                }
            }
        }
    }
}
