import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;


public class Main{
	static int n;
	static int[] people;
	static boolean[] visit;
	static boolean[] select;
	static int min;
	static List<ArrayList<Integer>> list;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		n = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(br.readLine());
		people = new int[n];
		select = new boolean[n];
		min = Integer.MAX_VALUE;
		
		for(int i=0; i<n; i++) {
			people[i] = Integer.parseInt(st.nextToken());
		}
		list = new ArrayList<>();
		for(int i=0; i<n; i++) {
			list.add(new ArrayList<>());
		}
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine());
			int k = Integer.parseInt(st.nextToken());
			for(int j=0; j<k; j++) {
				int num = Integer.parseInt(st.nextToken());
				list.get(i).add(num-1);
			}
		}
		Subset(0);
		if(min == Integer.MAX_VALUE) {
			min = -1;
		}
		System.out.println(min);
	}
	public static void Subset(int cnt) {
		if(cnt == n) {
			ArrayList<Integer> aList = new ArrayList<>();
			ArrayList<Integer> bList = new ArrayList<>();
			
			for(int i=0; i<n; i++) {
				if(select[i]) {
					aList.add(i);
				}
				else {
					bList.add(i);
				}
			}
			if(aList.size()== 0 || bList.size() == 0) {
				return;
			}
			if(Check(aList) && Check(bList)) {
				Gap();
			}
			return;
		}
		select[cnt] = true;
		Subset(cnt+1);
		select[cnt] = false;
		Subset(cnt+1);
	}
	public static boolean Check(ArrayList<Integer> arr) {
		visit = new boolean[n];
		Queue<Integer> q = new LinkedList<>();
		q.add(arr.get(0));
		visit[arr.get(0)] = true;
		int count =1;
		
		while(!q.isEmpty()) {
			int current = q.poll();
			for(int i=0; i<list.get(current).size(); i++) {
				int k = list.get(current).get(i);
				if(arr.contains(k) && !visit[k]) {
					q.add(k);
					visit[k] = true;
					count++;
				}
			}
		}
		if(count == arr.size()) {
			return true;
		}
		else {
			return false;
		}
	}
	public static void Gap() {
		int sumA = 0;
		int sumB = 0;
		for(int i=0; i<n; i++) {
			if(select[i]) {
				sumA += people[i];
			}
		}
		for(int i=0; i<n; i++) {
			if(!select[i]) {
				sumB += people[i];
			}
		}
		int result = Math.abs(sumA - sumB);
		min = Math.min(min,  result);
	}
}
