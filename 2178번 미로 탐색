import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringTokenizer;
class Miro{
    int x;
    int y;
    int count;
    public Miro(int x, int y, int count){
        this.x=x;
        this.y=y;
        this.count=count;
    }
}
public class Main {
    static int n, m;
    static int[][] arr;
    static boolean[][] visit;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int result;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();

        arr = new int[n][m];
        visit = new boolean[n][m];
        for(int i=0; i<n; i++){
            String str = sc.next();
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.valueOf(str.charAt(j)-48);
            }
        }
        result = 0;
        bfs();
        System.out.println(result+1);
    }
    private static void bfs(){
        Queue<Miro> q = new LinkedList<>();
        q.add(new Miro(0, 0, 0));
        visit[0][0] = true;
        while(!q.isEmpty()){
            Miro current = q.poll();
            if(current.x == n-1 && current.y == m-1){
                result = Math.max(result, current.count);
//                System.out.println(result);
                return;
            }
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];

                if(nx < 0 || ny < 0 || nx >= n || ny >= m){
                    continue;
                }
                if(arr[nx][ny] == 0 || visit[nx][ny]){
                    continue;
                }
                q.add(new Miro(nx, ny, current.count+1));
                visit[nx][ny] = true;
            }
        }
    }
}
