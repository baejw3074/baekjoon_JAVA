import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Pos{
    int x;
    int y;
    public Pos(int x, int y){
        this.x=x;
        this.y=y;
    }
}
public class Main{
    static int n, m;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static boolean[][] visit;
    static ArrayList<Pos> list;
    static int answer;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];
        list = new ArrayList<>();
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
                if(arr[i][j] == 1){
                    list.add(new Pos(i, j));
                }
            }
        }
        answer = 0;
        while(list.size() != 0){
            answer++;
            visit = new boolean[n][m];
            bfs();
            melt();
        }
        System.out.println(answer);
    }
    private static void melt(){
        for(int i=0; i<list.size(); i++){
            int x = list.get(i).x;
            int y = list.get(i).y;
            int count = 0;
            for(int j=0; j<4; j++){
                int nx = x + dx[j];
                int ny = y + dy[j];
                if (nx < 0 || ny < 0 || nx >= n || ny >= m) {
                    continue;
                }
                if(arr[nx][ny] == 2){
                    count++;
                }
            }
            if(count>=2){
                arr[x][y] = 0;
                list.remove(i);
                i--;
            }
        }
    }
    private static void bfs(){
        Queue<Pos> q = new LinkedList<>();
        q.add(new Pos(0, 0));
        visit[0][0] = true;
        arr[0][0] = 2;
        while(!q.isEmpty()){
            Pos current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx < 0 || ny < 0 || nx>=n || ny>=m){
                    continue;
                }
                if(visit[nx][ny] || arr[nx][ny] == 1){
                    continue;
                }
                arr[nx][ny] = 2;
                visit[nx][ny] = true;
                q.add(new Pos(nx, ny));
            }
        }
    }
}
