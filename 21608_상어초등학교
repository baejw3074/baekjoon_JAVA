import java.util.*;
import java.io.*;
class Seat{
    int x;
    int y;
    int emptyCount;
    int friendCount;
    public Seat(int x, int y, int emptyCount, int friendCount){
        this.x = x;
        this.y = y;
        this.emptyCount = emptyCount;
        this. friendCount = friendCount;
    }
}
public class Main{
    static int n;
    static int[][] arr;
    static HashMap<Integer, int[]> map;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int answer = 0;
    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        arr = new int[n][n];
        map = new HashMap<>();
        for(int i=0; i<n*n; i++){
            st = new StringTokenizer(br.readLine());
            int student = Integer.parseInt(st.nextToken());
            int f1 = Integer.parseInt(st.nextToken());
            int f2 = Integer.parseInt(st.nextToken());
            int f3 = Integer.parseInt(st.nextToken());
            int f4 = Integer.parseInt(st.nextToken());
            map.put(student, new int[] {f1, f2, f3, f4});
            makeSeat(student);
        }
        getScore();
        System.out.println(answer);
    }
    private static void makeSeat(int student){
        int[] friend = map.get(student);
        ArrayList<Seat> list = new ArrayList<>();
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                int friendcount = 0;
                int emptycount = 0;
                for(int d=0; d<4; d++){
                    int nx = i + dx[d];
                    int ny = j + dy[d];
                    if(nx < 0 || ny < 0 || nx >=n || ny >= n){
                        continue;
                    }
                    for(int f=0; f<4; f++){
                        if(arr[nx][ny] == friend[f]){
                            friendcount++;
                        }
                    }
                    if(arr[nx][ny] == 0){
                        emptycount++;
                    }
                }
                list.add(new Seat(i, j, emptycount, friendcount));
            }
        }
        list.sort((s1, s2) -> {
            if(s1.friendCount == s2.friendCount){
                if(s1.emptyCount == s2.emptyCount){
                    if(s1.x == s2.x){
                        return s1.y - s2.y;
                    }
                    return s1.x - s2.x;
                }
                return s2.emptyCount - s1.emptyCount;
            }
            return s2.friendCount - s1.friendCount;
        });
        for(int i=0; i<list.size(); i++){
            if(arr[list.get(i).x][list.get(i).y] != 0){
                continue;
            }
            arr[list.get(i).x][list.get(i).y] = student;
            return;
        }
    }
    private static void getScore(){
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                int count = 0;
                int[] friend = map.get(arr[i][j]);
                for(int d=0; d<4; d++){
                    int nx = i + dx[d];
                    int ny = j + dy[d];
                    if(nx < 0 || ny < 0 || nx >= n || ny >= n){
                        continue;
                    }
                    for(int f=0; f<4; f++){
                        if(arr[nx][ny] == friend[f]){
                            count++;
                        }
                    }
                }
                if(count == 1){
                    answer += 1;
                }
                else if(count == 2){
                    answer += 10;
                }
                else if(count == 3){
                    answer += 100;
                }
                else if(count == 4){
                    answer += 1000;
                }
            }
        }
    }
}
