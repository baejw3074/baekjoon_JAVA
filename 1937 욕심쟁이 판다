import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main{
    static int n;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int[][] dp;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        arr = new int[n][n];
        dp = new int[n][n];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int max = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                max = Math.max(max, DFS(i, j));
            }
        }
        System.out.println(max);
    }
    private static int DFS(int x, int y){
        if(dp[x][y]!= 0){
            return dp[x][y];
        }
        dp[x][y] = 1;
        for(int i=0; i<4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx >=n || ny >= n || nx < 0 || ny <0){
                continue;
            }
            if(arr[x][y] < arr[nx][ny]){
                dp[x][y] = Math.max(dp[x][y], DFS(nx, ny)+1);
                DFS(nx, ny);
            }
        }
        return dp[x][y];
    }
}
