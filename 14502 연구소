import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class wall{
    int x;
    int y;
    public wall(int x, int y){
        this.x = x;
        this.y = y;
    }
}
public class Main {
    static int n, m;
    static int[][] arr;
    static int[][] result;
    static int[][] copyArr;
    static int max = Integer.MIN_VALUE;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0 ,0 ,-1, 1};
    static int count;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        combination(0,0);
        System.out.println(max);

    }
    public static void combination(int cnt, int start){
        if(cnt == 3){
            spreadBfs();
            return;
        }
        for(int i=start; i<n*m; i++){
            int r = i / m;
            int c = i % m;
            if(arr[r][c] == 0){
                arr[r][c] = 1;
                combination(cnt+1, i+1);
                arr[r][c] = 0;
            }
        }
    }
    public static void spreadBfs(){
        Queue<wall> q = new LinkedList<>();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j] == 2){
                    q.add(new wall(i, j));
                }
            }
        }
        copyArr = new int[n][m];
        for(int i=0; i<n; i++){
            copyArr[i] = arr[i].clone();
        }
        while(!q.isEmpty()){
            wall current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx>=0 && ny>=0 && nx<n && ny<m && copyArr[nx][ny] == 0){
                    q.add(new wall(nx, ny));
                    copyArr[nx][ny] = 2;
                }
            }
        }
        count = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(copyArr[i][j] == 0){
                    count++;
                }
            }
        }
        max = Math.max(count, max);
    }
}
