import java.util.PriorityQueue;
import java.util.Scanner;

public class Main {
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int[][] map;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        map = new int[n][n];
        int[] current = null;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                map[i][j] = sc.nextInt();
                if (map[i][j] == 9) {
                    current = new int[]{i, j};
                    map[i][j] = 0;
                }
            }
        }

        int size = 2;
        int eat = 0;
        int move = 0;

        while(true){
            PriorityQueue<int[]> q = new PriorityQueue<>((o1, o2) ->
                    o1[2] != o2[2] ? Integer.compare(o1[2], o2[2]) : (o1[0] != o2[0] ? Integer.compare(o1[0], o2[0]) : Integer.compare(o1[1], o2[1]))
            );
            boolean[][] visit = new boolean[n][n];
            q.add(new int[]{current[0], current[1], 0});
            visit[current[0]][current[1]] = true;

            boolean check = false;

            while(!q.isEmpty()){
                current = q.poll();
                if (map[current[0]][current[1]] != 0 && map[current[0]][current[1]] < size) {
                    map[current[0]][current[1]] = 0;
                    eat++;
                    move += current[2];
                    check = true;
                    break;
                }
                for (int k = 0; k < 4; k++) {
                    int nx = current[0] + dx[k];
                    int ny = current[1] + dy[k];

                    if (ny < 0 || nx < 0 || nx >= n || ny >= n || visit[nx][ny] || map[nx][ny] > size)
                        continue;

                    q.add(new int[]{nx, ny, current[2] + 1});
                    visit[nx][ny] = true;
                }
            }
            if (!check)
                break;

            if (size == eat) {
                size++;
                eat = 0;
            }
        }
        System.out.println(move);
    }
}
