import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Pos{
    int x;
    int y;
    public Pos(int x, int y){
        this.x=x;
        this.y=y;
    }
}
public class Main{
    static int n;
    static int m;
    static int[][] arr;
    static boolean[][] visit;
    static int[] dx = {-1, 1, 0, 0}; 
    static int[] dy = {0, 0, -1, 1};
    static int result;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int T = Integer.parseInt(st.nextToken());
        for(int t=0; t<T; t++){
            st = new StringTokenizer(br.readLine());
            m = Integer.parseInt(st.nextToken());
            n = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());
            arr = new int[n][m];
            visit = new boolean[n][m];
            result = 0;

            for(int i=0; i<k; i++){
                st = new StringTokenizer(br.readLine());
                int M = Integer.parseInt(st.nextToken());
                int N = Integer.parseInt(st.nextToken());

                arr[N][M] = 1;
            }
            for(int i=0; i<n; i++){
                for(int j=0; j<m; j++){
                    if(arr[i][j] == 1 && !visit[i][j]){
                        bfs(i, j);
                    }
                }
            }
            System.out.println(result);
        }
    }
    private static void bfs(int x, int y){
        result++;
        Queue<Pos> q = new LinkedList<>();
        q.add(new Pos(x, y));
        while(!q.isEmpty()){
            Pos current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx <0 || ny <0 || nx >=n || ny >= m){
                    continue;
                }
                if (arr[nx][ny] == 1 && !visit[nx][ny]) {
                    visit[nx][ny] = true;
                    q.add(new Pos(nx, ny));
                }
            }
        }
    }
}
