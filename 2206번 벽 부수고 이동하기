import javax.management.QueryEval;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Wall{
    int x;
    int y;
    int count;
    boolean wall;
    public Wall(int x, int y, int count, boolean wall){
        this.x=x;
        this.y=y;
        this.count = count;
        this.wall=wall;
    }
}
public class Main{
    static int n, m;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static boolean[][][] visit;
    static int min;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n][m];
        visit = new boolean[n][m][2];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            String str= st.nextToken();
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.valueOf(str.charAt(j)) - 48;
            }
        }
        min = Integer.MAX_VALUE;
        bfs(0, 0, 1, false);
        System.out.println(min == Integer.MAX_VALUE ? -1 : min );
    }
    private static void bfs(int x, int y, int count, boolean wall){
        Queue<Wall> q = new LinkedList<>();
        q.add(new Wall(x, y, count, wall));
        visit[x][y][0] = true;
        while(!q.isEmpty()){
            Wall current = q.poll();
            if(current.x == n-1 && current.y == m-1){
                min = Math.min(current.count, min);
                return;
            }
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];

                if(nx <0 || ny < 0 || nx >= n || ny >= m){
                    continue;
                }
                if(arr[nx][ny] == 1){
                    if(!current.wall){
                        q.add(new Wall(nx, ny, current.count+1, true));
                        visit[nx][ny][1] = true;
                    }
                }
                else{
                    if(!current.wall && !visit[nx][ny][0]){
                        q.add(new Wall(nx, ny, current.count+1, false));
                        visit[nx][ny][0] = true;
                    }
                    else if(current.wall && !visit[nx][ny][1]){
                        q.add(new Wall(nx, ny, current.count+1, true));
                        visit[nx][ny][1] = true;
                    }
                }
            }
        }
    }
}
