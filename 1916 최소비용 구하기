import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

class Bus implements Comparable<Bus>{
    int arrive;
    int weight;

    Bus(int arrive, int weight){
        this.arrive = arrive;
        this.weight = weight;
    }
    @Override
    public int compareTo(Bus b){
        return weight - b.weight;
    }
}
public class Main{
    static int n;
    static int m;
    static ArrayList<Bus>[] arr;
    static int[] dist;
    static boolean visit[];
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        n = Integer.parseInt(br.readLine());
        m = Integer.parseInt(br.readLine());
        arr = new ArrayList[n+1];
        visit = new boolean[n+1];
        dist = new int[n+1];
        Arrays.fill(dist, Integer.MAX_VALUE);

        for(int i=1; i<=n; i++){
            arr[i] = new ArrayList<>();
        }

        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int start = Integer.parseInt(st.nextToken());
            int end = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            arr[start].add(new Bus(end, w));
        }

        st = new StringTokenizer(br.readLine());
        int startCity = Integer.parseInt(st.nextToken());
        int endCity = Integer.parseInt(st.nextToken());

        dijkstra(startCity);
        System.out.println(dist[endCity]);
    }
    public static void dijkstra(int startCity){
        PriorityQueue<Bus> que = new PriorityQueue<>();
        que.offer(new Bus(startCity, 0));
        dist[startCity] = 0;
        while(!que.isEmpty()){
            Bus currentBus = que.poll();
            int currentEnd = currentBus.arrive;

            if(!visit[currentEnd]){
                visit[currentEnd] = true;
                for(Bus b : arr[currentEnd]){
                    if(!visit[b.arrive] && dist[b.arrive] > dist[currentEnd] + b.weight){
                        dist[b.arrive] = dist[currentEnd] +b.weight;
                        que.offer(new Bus(b.arrive, dist[b.arrive]));
                    }
                }
            }
        }
    }
}
