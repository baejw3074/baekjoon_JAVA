import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Pos{
    int x;
    int y;
    public Pos(int x, int y){
        this.x=x;
        this.y=y;
    }
}

public class Main{
    static int n;
    static int m;
    static int result = 0;

    static int[][] arr;
    static boolean[][] visit;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n][m];
        visit = new boolean[n][m];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(arr[i][j] == 0 && !visit[i][j]){
                    result++;
                    bfs(i, j);
                }
            }
        }
        System.out.println(result);
    }
    private static void bfs(int x, int y){
        visit[x][y] = true;
        Queue<Pos> q = new LinkedList<>();
        q.add(new Pos(x, y));
        while(!q.isEmpty()){
            Pos current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx == n){
                    nx = 0;
                }
                else if(nx == -1){
                    nx = n-1;
                }
                if(ny == m){
                    ny = 0;
                }
                else if(ny == -1){
                    ny = m-1;
                }
                if(arr[nx][ny] == 0 && !visit[nx][ny]){
                    q.add(new Pos(nx, ny));
                    visit[nx][ny] = true;
                }
            }
        }
    }
}
