import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Point{
    int x;
    int y;
    public Point(int x, int y){
        this.x=x;
        this.y=y;
    }
}
public class Main{
    static char[][] arr;
    static boolean[] key;
    static ArrayList<Point>[] gates;
    static boolean[][] visit;
    static int h;
    static int w;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int count;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int t = Integer.parseInt(st.nextToken());
        for(int i=0; i<t; i++){
            st = new StringTokenizer(br.readLine());
            h = Integer.parseInt(st.nextToken());
            w = Integer.parseInt(st.nextToken());

            arr = new char[h+2][w+2];
            visit = new boolean[h+2][w+2];
            key = new boolean[26];
            gates = new ArrayList[26];
            count = 0;

            for(int j=0; j<26; j++){
                gates[j] = new ArrayList<>();
            }
            for(int j=0; j<h+2; j++){
                for(int k=0; k<w+2; k++){
                    arr[j][k] = '.';
                }
            }

            for(int j=1; j<=h; j++){
                String str = br.readLine();
                for(int k=1; k<=w; k++){
                    arr[j][k] = str.charAt(k-1);
                }
            }
            String str = br.readLine();
            if(!str.equals("0")){
                for(int j=0; j<str.length(); j++){
                    int temp = str.charAt(j) - 'a';
                    key[temp] = true;
                }
            }

            bfs();
            System.out.println(count);
        }
    }
    private static void bfs(){
        Queue<Point> q = new LinkedList<>();
        q.add(new Point(0, 0));
        visit[0][0] = true;
        while(!q.isEmpty()){
            Point current = q.poll();
            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];

                if(nx < 0 || ny < 0 || nx >= h+2 || ny >= w+2){
                    continue;
                }
                if(arr[nx][ny] == '*' || visit[nx][ny]){
                    continue;
                }
                int element = arr[nx][ny];
                if(element - 'A' >=0 && element - 'A' <= 25){
                    if(key[element - 'A']){
                        arr[nx][ny] = '.';
                        visit[nx][ny] = true;
                        q.add(new Point(nx, ny));
                    }
                    else{
                        gates[element - 'A'].add(new Point(nx, ny));
                    }
                }
                else if(element - 'a' >= 0 && element - 'a' <= 25){
                    key[element - 'a'] = true;
                    visit[nx][ny] = true;
                    q.add(new Point(nx, ny));

                    for(int j=0; j<= 25; j++){
                        if(gates[j].size() != 0 && key[j]){
                            for(int k =0; k<gates[j].size(); k++){
                                Point temp = gates[j].get(k);
                                arr[temp.x][temp.y] = '.';
                                visit[temp.x][temp.y] = true;
                                q.add(new Point(temp.x, temp.y));
                            }
                        }
                    }
                }
                else if(element == '$'){
                    count++;
                    visit[nx][ny] = true;
                    q.add(new Point(nx, ny));
                }
                else{
                    visit[nx][ny] = true;
                    q.add(new Point(nx, ny));
                }
            }
        }
    }
}
