import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
class Node{
    int x;
    int y;
    int count;
    int k;
    public Node(int x, int y, int count, int k){
        this.x =x;
        this.y = y;
        this.count = count;
        this.k = k;
    }
}

public class 원숭이 {
    static boolean[][][] visit;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int[] hdx = {-2, -2, -1, -1, 1, 1, 2, 2}; // 말처럼 이동
    static int[] hdy = {-1, 1, -2, 2, -2, 2, -1, 1};
    static int k,w,h;
    static int min = Integer.MAX_VALUE;
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        k = sc.nextInt(); // 말처럼
        w = sc.nextInt();
        h = sc.nextInt();

        arr = new int[h][w];
        visit = new boolean[h][w][k+1];

        for(int i=0; i<h; i++){
            for(int j=0; j<w; j++){
                arr[i][j] = sc.nextInt();
            }
        }
        min = bfs(0, 0);

        if(min == Integer.MAX_VALUE) System.out.println("-1");
        else System.out.println(min);

    }
    public static int bfs(int x, int y){
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x, y, 0, k));
        visit[x][y][k] = true;

        while(!q.isEmpty()){
            Node current = q.poll();
            if(current.x == h-1 && current.y == w-1) return current.count;

            for(int i=0; i<4; i++){
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                if(nx>=0 && ny>=0 && nx < h && ny < w && !visit[nx][ny][current.k] && arr[nx][ny] == 0){
                    visit[nx][ny][current.k] = true;
                    q.offer(new Node(nx, ny, current.count+ 1, current.k));
                }
            }
            if(current.k>0){
                for(int i=0; i<8; i++){
                    int nx = current.x + hdx[i];
                    int ny = current.y + hdy[i];
                    if(nx >=0 && ny >=0 && nx < h && ny < w && !visit[nx][ny][current.k-1] && arr[nx][ny]==0){
                        visit[nx][ny][current.k-1] = true;
                        q.offer(new Node(nx, ny, current.count +1, current.k-1));
                    }
                }
            }

        }
        return min;
    }
}

//<다시 풀기>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Node{
    int x;
    int y;
    int count;
    int k;
    public Node(int x, int y, int count, int k){
        this.x = x;
        this.y = y;
        this.count = count;
        this.k = k;

    }
}
public class 말이되고픈원숭이 {
    static int k;
    static int h, w;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1 ,1};
    static int[] hdx = {-1, -2, -2, -1, 1, 2, 2, 1};
    static int[] hdy = {-2, -1, 1, 2, -2, -1, 1, 2};
    static boolean[][][] visit;
    static int min = Integer.MAX_VALUE;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        k = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());

        w = Integer.parseInt(st.nextToken());
        h = Integer.parseInt(st.nextToken());


        arr = new int[h][w];
        visit = new boolean[h][w][k+1];
        for(int i=0; i<h; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<w; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        min = bfs(0,0);
        if(min == Integer.MAX_VALUE) System.out.println(-1);
        else System.out.println(min);

    }
    public static int bfs(int x, int y){
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(x, y, 0, k));
        visit[x][y][k] = true;
        while(!q.isEmpty()){
            Node current = q.poll();
            if(current.x == h-1 && current.y == w-1) return current.count;

            for(int i=0; i<4; i++){
                int dh = current.x + dx[i];
                int dw = current.y + dy[i];
                if(dh>=0 && dw>=0 && dh<h && dw<w && !visit[dh][dw][current.k] && arr[dh][dw]==0){
                    visit[dh][dw][current.k] = true;
                    q.add(new Node(dh, dw, current.count+1, current.k));
                }
            }
            if(current.k>0){
                for(int i=0; i<8; i++){
                    int dh = current.x + hdx[i];
                    int dw = current.y + hdy[i];
                    if(dh>=0 && dw >=0 && dh<h && dw<w && !visit[dh][dw][current.k-1] && arr[dh][dw]==0){
                        visit[dh][dw][current.k-1]=true;
                        q.add(new Node(dh, dw, current.count+1, current.k-1));
                    }
                }
            }
        }
        return min;
    }
}

