import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

class Node{
    char value;;
    Node left;
    Node right;
    public Node(char value){
        this.value = value;
        this.left = null;
        this.right = null;
    }
}
public class Main{
    static Node[] tree;
    private static void preorder(Node node){
        if(node == null){
            return;
        }
        System.out.print(node.value);
        preorder(node.left);
        preorder(node.right);
    }
    private static void inorder(Node node){
        if(node == null){
            return;
        }
        inorder(node.left);
        System.out.print(node.value);
        inorder(node.right);
    }
    private static void postorder(Node node){
        if(node == null){
            return;
        }
        postorder(node.left);
        postorder(node.right);
        System.out.print(node.value);
    }
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        tree = new Node[n+1];

        for(int i=0; i<n; i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            char parent = st.nextToken().charAt(0);
            char left = st.nextToken().charAt(0);
            char right = st.nextToken().charAt(0);

            if(tree[parent - 'A'] == null){
                tree[parent - 'A'] = new Node(parent); // 부모생성
            }
            if(left != '.'){
                tree[left - 'A'] = new Node(left); // 왼쪽 자식 생성
                tree[parent - 'A'].left = tree[left - 'A']; // 부모의 왼쪽 자식 연결
            }
            if (right != '.') {
                tree[right - 'A'] = new Node(right); // 오른쪽 자식 생성
                tree[parent - 'A'].right = tree[right - 'A']; // 부모의 오른쪽 자식 연결
            }
        }
        // 전위 순회
        preorder(tree[0]);
        System.out.println();

        // 중위 순회
        inorder(tree[0]);
        System.out.println();

        // 후위 순회
        postorder(tree[0]);
        System.out.println();
    }
}
