import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class Main{
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        LinkedList<Integer> list = new LinkedList<>();
        for(int i=1; i<=n; i++){
            list.add(i);
        }
        System.out.print("<");
        while(!list.isEmpty()){
            for(int i=0; i<k; i++){
                if(i == k-1){
                    int a = list.remove();
                    if(list.size() == 0){
                        System.out.print(a);
                    }
                    else{
                        System.out.print(a + ", ");
                    }
                }
                else{
                    list.add(list.remove());
                }
            }
        }
        System.out.print(">");
    }
}
//<다시 풀기> - 문제를 그냥 볼 때는 ArrayList가 생각났다.
import java.util.ArrayList;
import java.util.Scanner;

public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        StringBuilder sb = new StringBuilder();
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=1; i<=n; i++){
            list.add(i);
        }
        sb.append("<");
        int count = -1;
        int index = -1;
        while(!list.isEmpty()){
            count = count + k;
            count = count %list.size();
            sb.append(list.get(count));
            list.remove(list.get(count));
            count--;
            if(!list.isEmpty()){
                sb.append(", ");
            }
        }
        sb.append(">");
        System.out.println(sb);
    }
}
