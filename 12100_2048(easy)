import java.util.*;
import java.io.*;
public class Main {
    static int n;
    static int[][] arr;
    static int[][] new_arr;
    static int max = 0;
    static int[] order;
    public static void main(String[] args)throws  IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        StringTokenizer st;
        arr = new int[n][n];
        order = new int[5];

        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        select_direction(0);
        System.out.println(max);
    }
    private static void select_direction(int cnt){
        if (cnt == 5) {
            new_arr = new int[n][n];
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    new_arr[i][j] = arr[i][j];
                }
            }
            for(int i=0; i<5; i++){
                int dir = order[i];
                how_to_move(dir);
            }
            int temp = 0;
            for(int i=0; i<n; i++){
                for(int j=0; j<n; j++){
                    temp = Math.max(temp, new_arr[i][j]);
                }
            }
            max = Math.max(max, temp);
            return;
        }

        for(int i=0; i<4; i++){
            order[cnt] = i;
            select_direction(cnt+1);
        }
    }
    private static void how_to_move(int dir){
        if(dir ==0){//상
            for(int i=0; i<n; i++){
                int index = 0;
                int block = 0;
                for(int j=0; j<n; j++){
                    if(new_arr[j][i] !=0){
                        if(block == new_arr[j][i]){
                            new_arr[index - 1][i] = block * 2;
                            block = 0;
                            new_arr[j][i] = 0;
                        }
                        else{
                            block = new_arr[j][i];
                            new_arr[j][i] = 0;
                            new_arr[index][i] = block;
                            index++;
                        }
                    }
                }
            }
        }
        else if(dir == 1){//하
            for(int i=0; i<n; i++){
                int index = n-1;
                int block = 0;
                for(int j=n-1; j>=0; j--){
                    if(new_arr[j][i] !=0){
                        if(block == new_arr[j][i]){
                            new_arr[index + 1][i] = block * 2;
                            block = 0;
                            new_arr[j][i] = 0;
                        }
                        else{
                            block = new_arr[j][i];
                            new_arr[j][i] = 0;
                            new_arr[index][i] = block;
                            index--;
                        }
                    }
                }
            }
        }
        else if(dir == 2){//좌
            for(int i=0; i<n; i++){
                int index = 0;
                int block = 0;
                for(int j=0; j<n; j++){
                    if(new_arr[i][j] !=0){
                        if(block == new_arr[i][j]){
                            new_arr[i][index-1] = block * 2;
                            block = 0;
                            new_arr[i][j] = 0;
                        }
                        else{
                            block = new_arr[i][j];
                            new_arr[i][j] = 0;
                            new_arr[i][index] = block;
                            index++;
                        }
                    }
                }
            }
        }
        else if(dir == 3){//우
            for(int i=0; i<n; i++){
                int index = n-1;
                int block = 0;
                for(int j=n-1; j>=0; j--){
                    if(new_arr[i][j] !=0){
                        if(block == new_arr[i][j]){
                            new_arr[i][index+1] = block * 2;
                            block = 0;
                            new_arr[i][j] = 0;
                        }
                        else{
                            block = new_arr[i][j];
                            new_arr[i][j] = 0;
                            new_arr[i][index] = block;
                            index--;
                        }
                    }
                }
            }
        }
    }
}
