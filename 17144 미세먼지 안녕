import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main{
    static int r, c, t;
    static int[][] arr;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static int[] fresh;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        r = Integer.parseInt(st.nextToken());
        c = Integer.parseInt(st.nextToken());
        t = Integer.parseInt(st.nextToken());

        arr = new int[r][c];
        fresh = new int[2];
        int k=0;
        for(int i=0; i<r; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<c; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
                if(arr[i][j] ==-1){
                    fresh[k++] = i;
                }
            }
        }
        for(int i=0; i<t; i++){
            spread();
            cycle();
        }
        int sum=0;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(arr[i][j] >0){
                    sum += arr[i][j];
                }
            }
        }
        System.out.println(sum);
    }
    private static void spread(){
        int[][] copy = new int[r][c];

        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                if(arr[i][j] !=0 && arr[i][j] != -1){
                    int count = 0;
                    for(int k=0; k<4; k++){
                        int nx = i + dx[k];
                        int ny = j + dy[k];

                        if(nx<0 || ny<0 || nx>=r || ny>=c || arr[nx][ny] ==-1){
                            continue;
                        }
                        count++;
                        copy[nx][ny] += arr[i][j]/5;
                    }
                    copy[i][j] += arr[i][j] - arr[i][j]/5*count;
                }
            }
        }
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++){
                arr[i][j] = copy[i][j];
            }
        }
        for(int i=0; i<2; i++){
            arr[fresh[i]][0] = -1;
        }
    }
    private static void cycle(){
        int count = 0;
        for(int i=0; i<r; i++){
            if(arr[i][0] == -1 && count == 0){
                count++;
                arr[i-1][0] = 0;
                for(int k=i-2; k>=0; k--){
                    arr[k+1][0] = arr[k][0];
                }
                for(int k=1; k<c; k++){
                    arr[0][k-1] = arr[0][k];
                }
                for(int k=1; k<=i; k++){
                    arr[k-1][c-1] = arr[k][c-1];
                }
                for(int k=c-2; k>=1; k--){
                    arr[i][k+1] = arr[i][k];
                }
                arr[i][1] = 0;
                continue;
            }
            if(arr[i][0] == -1 && count == 1){
                arr[i+1][0] = 0;
                for(int k=i+2; k<r; k++){
                    arr[k-1][0] = arr[k][0];
                }
                for(int k=1; k<c; k++){
                    arr[r-1][k-1] = arr[r-1][k];
                }
                for(int k=r-2; k>=i; k--){
                    arr[k+1][c-1] = arr[k][c-1];
                }
                for(int k=c-2; k>=1; k--){
                    arr[i][k+1] = arr[i][k];
                }
                arr[i][1] = 0;
            }
        }
    }
}
