import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main{
    static int n;
    static int k;
    static int[] arr = new int[100001];
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());

        int result = bfs(n);
        System.out.println(result);
    }
    private static int bfs(int n){
        Queue<Integer> queue = new LinkedList<>();
        arr[n] = 1;
        queue.add(n);
        while(!queue.isEmpty()){
            int node = queue.poll();
            if(node == k){
                return arr[node] - 1;
            }
            if(node-1 >=0 && arr[node-1] == 0){
                arr[node-1] = arr[node] + 1;
                queue.add(node-1);
            }
            if(node+1 <= 100000 && arr[node+1] == 0){
                arr[node+1] = arr[node] + 1;
                queue.add(node+1);
            }
            if(node*2 <= 100000 && arr[node*2] == 0){
                arr[node*2] = arr[node] + 1;
                queue.add(node*2);
            }
        }
        return -1;
    }
}
