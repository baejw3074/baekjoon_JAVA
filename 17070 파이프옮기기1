import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
//class Node{
//    int x;
//    int y;
//    int direction;
//    public Node(int x, int y, int direction){
//        this.x=x;
//        this.y=y;
//        this.direction=direction;
//    }
//}

public class 파이프옮기기 {
    static int n;
    static int[][] arr;
    static int count = 0;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());

        arr = new int[n][n];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        dfs_0(0,1);
        System.out.println(count);

    }
    public static void dfs_0(int x, int y){ // 가로
        if(x == n-1 && y == n-1){
            count++;
            return;
        }
        if(y+1<n && arr[x][y+1] !=1){
            dfs_0(x, y+1);
        }
        if(y+1<n && x+1<n && arr[x+1][y+1]!=1 && arr[x][y+1] !=1 && arr[x+1][y]!=1){
            dfs_2(x+1, y+1);
        }
    }
    public static void dfs_1(int x, int y){ // 세로
        if(x == n-1 && y == n-1){
            count++;
            return;
        }
        if(x+1<n && arr[x+1][y]!=1){
            dfs_1(x+1, y);
        }
        if(y+1<n && x+1<n && arr[x+1][y+1]!=1  && arr[x][y+1] !=1 && arr[x+1][y]!=1){
            dfs_2(x+1, y+1);
        }
    }
    public static void dfs_2(int x, int y){ // 대각선
        if(x == n-1 && y == n-1){
            count++;
            return;
        }
        if(y+1<n && arr[x][y+1] !=1){
            dfs_0(x, y+1);
        }
        if(x+1<n && arr[x+1][y]!=1){
            dfs_1(x+1, y);
        }
        if(y+1<n && x+1<n && arr[x+1][y+1]!=1  && arr[x][y+1] !=1 && arr[x+1][y]!=1){
            dfs_2(x+1, y+1);
        }
    }
}

//<dp 방식>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 파이프옮기기1dp {
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());

        int[][] arr = new int[n][n];
        int[][][] dp = new int[n][n][3];
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<n; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        dp[0][1][0] = 1;
        for(int i=0; i<n; i++){
            for(int j=2; j<n; j++){
                if(j-1>=0 && arr[i][j] == 0){
                    dp[i][j][0] = dp[i][j-1][0] + dp[i][j-1][2];
                }
                if(i-1>=0 && arr[i][j] == 0){
                    dp[i][j][1] = dp[i-1][j][1] + dp[i-1][j][2];
                }
                if(i-1>=0 && j-1>=0 && arr[i][j] == 0 && arr[i-1][j]==0 && arr[i][j-1] == 0){
                    dp[i][j][2] = dp[i-1][j-1][0] + dp[i-1][j-1][1] + dp[i-1][j-1][2];
                }
            }
        }
        int result = dp[n-1][n-1][0] + dp[n-1][n-1][1] + dp[n-1][n-1][2];
        System.out.println(result);
    }
}
