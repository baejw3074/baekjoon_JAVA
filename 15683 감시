import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class cctv{
    int x;
    int y;
    int num;
    public cctv(int x, int y, int num){
        this.x=x;
        this.y=y;
        this.num =num;
    }
}
public class Main{
    static int n, m;
    static int[][] arr;
    static int[][] copy;
    static int[] result;
    static ArrayList<cctv> list;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};
    static int min = Integer.MAX_VALUE;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());

        arr = new int[n][m];
        list = new ArrayList<>();
        for(int i=0; i<n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<m; j++){
                arr[i][j] = Integer.parseInt(st.nextToken());
                if(arr[i][j] >=1 && arr[i][j] <=5){
                    list.add(new cctv(i, j, arr[i][j]));
                }
            }
        }
        result = new int[list.size()];
        permutation(0, list.size());
        System.out.println(min);
    }
    private static void permutation(int cnt, int k){
        if(cnt == k){
            copy = new int[n][m];
            for(int i=0; i<n; i++){
                for(int j=0; j<m; j++){
                    copy[i][j] = arr[i][j];
                }
            }
            for(int i=0; i<list.size(); i++){
                direction(list.get(i), result[i]);
            }
            int count = 0;
            for(int i=0; i<n; i++){
                for(int j=0; j<m; j++){
                    if(copy[i][j] == 0){
                        count++;
                    }
                }
            }
            min = Math.min(min, count);
            return;
        }
        for(int i=0; i<4; i++){ // 중복 순열
            result[cnt] = i;
            permutation(cnt+1, k);
        }
    }
    private static void direction(cctv detect, int d){
        int num = detect.num;
        if(num == 1){
            if(d == 0){
                watch(detect, 0);
            }
            else if(d == 1){
                watch(detect, 1);
            }
            else if(d == 2){
                watch(detect, 2);
            }
            else if(d == 3){
                watch(detect, 3);
            }
        }
        else if(num == 2){
            if(d == 0 || d == 2){
                watch(detect, 0);
                watch(detect, 2);
            }
            else{
                watch(detect, 1);
                watch(detect, 3);
            }
        }
        else if(num == 3){
            if(d == 0){
                watch(detect, 0);
                watch(detect, 1);
            }
            else if(d == 1){
                watch(detect, 1);
                watch(detect, 2);
            }
            else if(d == 2){
                watch(detect, 2);
                watch(detect, 3);
            }
            else if(d == 3){
                watch(detect, 3);
                watch(detect, 0);
            }
        }
        else if(num == 4){
            if(d == 0){
                watch(detect, 0);
                watch(detect, 1);
                watch(detect, 3);
            }
            else if(d == 1){
                watch(detect, 0);
                watch(detect, 1);
                watch(detect, 2);
            }
            else if(d == 2){
                watch(detect, 1);
                watch(detect, 2);
                watch(detect, 3);
            }
            else if(d == 3){
                watch(detect, 3);
                watch(detect, 2);
                watch(detect, 0);
            }
        }
        else if(num == 5){
            watch(detect, 0);
            watch(detect, 1);
            watch(detect, 2);
            watch(detect, 3);
        }
    }
    private static void watch(cctv detect, int d){
        Queue<cctv> q = new LinkedList<>();
        boolean[][] visit = new boolean[n][m];
        q.add(detect);
        visit[detect.x][detect.y] = true;

        while(!q.isEmpty()){
            cctv current = q.poll();
            int nx = current.x + dx[d];
            int ny = current.y + dy[d];

            if(nx < 0 || ny <0 || nx >= n || ny >= m || copy[nx][ny] == 6){
                break;
            }
            if(copy[nx][ny] == 0){
                copy[nx][ny] = -1;
                q.add(new cctv(nx, ny, current.num));
            }
            else{
                q.add(new cctv(nx, ny, current.num));
            }
        }
    }
}
